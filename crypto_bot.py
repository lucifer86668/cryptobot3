import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Telegram Bot Token (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather)
TELEGRAM_BOT_TOKEN = '7417257593:AAE75GK41akngDHtBbR8c8MciVwPlKMg6yQ'

# Binance API URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
BINANCE_API_URL = 'https://api.binance.com/api/v3/ticker/price'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ Binance API
def get_price_from_binance(symbol):
    try:
        response = requests.get(BINANCE_API_URL, params={'symbol': symbol})
        response.raise_for_status()
        data = response.json()
        return float(data['price'])
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data for {symbol}: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /btc)
async def handle_crypto_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.strip()[1:].upper()  # –£–±–∏—Ä–∞–µ–º "/" –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    ticker = f"{command}USDT"  # –§–æ—Ä–º–∞—Ç —Ç–∏–∫–µ—Ä–∞ –¥–ª—è Binance (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
    price = get_price_from_binance(ticker)

    if price is not None:
        await update.message.reply_text(f"üí∞ {command} - ${price:.2f}")
    else:
        await update.message.reply_text(f"‚ùå Could not fetch the price for {command}. Please check the ticker.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("btc", handle_crypto_price))  # –î–ª—è BTC
    application.add_handler(CommandHandler("eth", handle_crypto_price))  # –î–ª—è ETH
    application.add_handler(CommandHandler("sol", handle_crypto_price))  # –î–ª—è SOL
    application.add_handler(CommandHandler("dot", handle_crypto_price))  # –î–ª—è DOT
    application.add_handler(CommandHandler("ada", handle_crypto_price))  # –î–ª—è ADA
    application.add_handler(CommandHandler("ape", handle_crypto_price))  # –î–ª—è APE
    application.add_handler(CommandHandler("apt", handle_crypto_price))  # –î–ª—è APT
    application.add_handler(CommandHandler("atom", handle_crypto_price))  # –î–ª—è ATOM

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    print("Bot is running. Press Ctrl+C to stop.")
    await application.idle()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
